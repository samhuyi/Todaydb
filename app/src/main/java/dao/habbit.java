package dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "HABBIT".
 */
public class habbit {

    private Long id;
    private String habbitName;
    private Integer isPrivated;
    private String cover;
    private Integer habbitOrder;
    private Long userId;
    private Long habbitId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient habbitDao myDao;

    private user user;
    private Long user__resolvedKey;

    private date date;
    private Long date__resolvedKey;

    private List<signedDays> signedDays;

    public habbit() {
    }

    public habbit(Long id) {
        this.id = id;
    }

    public habbit(Long id, String habbitName, Integer isPrivated, String cover, Integer habbitOrder, Long userId, Long habbitId) {
        this.id = id;
        this.habbitName = habbitName;
        this.isPrivated = isPrivated;
        this.cover = cover;
        this.habbitOrder = habbitOrder;
        this.userId = userId;
        this.habbitId = habbitId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHabbitDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getHabbitName() {
        return habbitName;
    }

    public void setHabbitName(String habbitName) {
        this.habbitName = habbitName;
    }

    public Integer getIsPrivated() {
        return isPrivated;
    }

    public void setIsPrivated(Integer isPrivated) {
        this.isPrivated = isPrivated;
    }

    public String getCover() {
        return cover;
    }

    public void setCover(String cover) {
        this.cover = cover;
    }

    public Integer getHabbitOrder() {
        return habbitOrder;
    }

    public void setHabbitOrder(Integer habbitOrder) {
        this.habbitOrder = habbitOrder;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public Long getHabbitId() {
        return habbitId;
    }

    public void setHabbitId(Long habbitId) {
        this.habbitId = habbitId;
    }

    /** To-one relationship, resolved on first access. */
    public user getUser() {
        Long __key = this.userId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            userDao targetDao = daoSession.getUserDao();
            user userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(user user) {
        synchronized (this) {
            this.user = user;
            userId = user == null ? null : user.getId();
            user__resolvedKey = userId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public date getDate() {
        Long __key = this.habbitId;
        if (date__resolvedKey == null || !date__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            dateDao targetDao = daoSession.getDateDao();
            date dateNew = targetDao.load(__key);
            synchronized (this) {
                date = dateNew;
            	date__resolvedKey = __key;
            }
        }
        return date;
    }

    public void setDate(date date) {
        synchronized (this) {
            this.date = date;
            habbitId = date == null ? null : date.getId();
            date__resolvedKey = habbitId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<signedDays> getSignedDays() {
        if (signedDays == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            signedDaysDao targetDao = daoSession.getSignedDaysDao();
            List<signedDays> signedDaysNew = targetDao._queryHabbit_SignedDays(id);
            synchronized (this) {
                if(signedDays == null) {
                    signedDays = signedDaysNew;
                }
            }
        }
        return signedDays;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSignedDays() {
        signedDays = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
