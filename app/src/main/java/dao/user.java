package dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "USER".
 */
public class user {

    private Long id;
    private String userName;
    private Integer achieveCounts;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient userDao myDao;

    private List<achievement> achieves;
    private List<habbit> habbits;

    public user() {
    }

    public user(Long id) {
        this.id = id;
    }

    public user(Long id, String userName, Integer achieveCounts) {
        this.id = id;
        this.userName = userName;
        this.achieveCounts = achieveCounts;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public Integer getAchieveCounts() {
        return achieveCounts;
    }

    public void setAchieveCounts(Integer achieveCounts) {
        this.achieveCounts = achieveCounts;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<achievement> getAchieves() {
        if (achieves == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            achievementDao targetDao = daoSession.getAchievementDao();
            List<achievement> achievesNew = targetDao._queryUser_Achieves(id);
            synchronized (this) {
                if(achieves == null) {
                    achieves = achievesNew;
                }
            }
        }
        return achieves;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAchieves() {
        achieves = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<habbit> getHabbits() {
        if (habbits == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            habbitDao targetDao = daoSession.getHabbitDao();
            List<habbit> habbitsNew = targetDao._queryUser_Habbits(id);
            synchronized (this) {
                if(habbits == null) {
                    habbits = habbitsNew;
                }
            }
        }
        return habbits;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHabbits() {
        habbits = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
