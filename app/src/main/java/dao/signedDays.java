package dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "SIGNED_DAYS".
 */
public class signedDays {

    private Long id;
    private java.util.Date day;
    private Long habbitId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient signedDaysDao myDao;

    private habbit habbit;
    private Long habbit__resolvedKey;


    public signedDays() {
    }

    public signedDays(Long id) {
        this.id = id;
    }

    public signedDays(Long id, java.util.Date day, Long habbitId) {
        this.id = id;
        this.day = day;
        this.habbitId = habbitId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSignedDaysDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDay() {
        return day;
    }

    public void setDay(java.util.Date day) {
        this.day = day;
    }

    public Long getHabbitId() {
        return habbitId;
    }

    public void setHabbitId(Long habbitId) {
        this.habbitId = habbitId;
    }

    /** To-one relationship, resolved on first access. */
    public habbit getHabbit() {
        Long __key = this.habbitId;
        if (habbit__resolvedKey == null || !habbit__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            habbitDao targetDao = daoSession.getHabbitDao();
            habbit habbitNew = targetDao.load(__key);
            synchronized (this) {
                habbit = habbitNew;
            	habbit__resolvedKey = __key;
            }
        }
        return habbit;
    }

    public void setHabbit(habbit habbit) {
        synchronized (this) {
            this.habbit = habbit;
            habbitId = habbit == null ? null : habbit.getId();
            habbit__resolvedKey = habbitId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
